<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Smart Pointers on 👨‍🌾 Charlie Chen</title>
    <link>http://localhost:1313/tags/smart-pointers/</link>
    <description>Recent content in Smart Pointers on 👨‍🌾 Charlie Chen</description>
    <generator>Hugo -- 0.124.1</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 07 May 2024 10:12:55 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/smart-pointers/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Smart Pointers in C&#43;&#43;</title>
      <link>http://localhost:1313/posts/c&#43;&#43;/smart-pointers-in-c&#43;&#43;/</link>
      <pubDate>Tue, 07 May 2024 10:12:55 +0800</pubDate>
      <guid>http://localhost:1313/posts/c&#43;&#43;/smart-pointers-in-c&#43;&#43;/</guid>
      <description>Let’s explore some examples of using std::unique_ptr, std::shared_ptr, and std::weak_ptr in C++.
std::unique_ptr: std::unique_ptr is designed for exclusive ownership of a dynamically allocated object. It ensures that there can be at most one unique_ptr pointing to any resource. When the unique_ptr is destroyed, the resource it points to is automatically reclaimed. You cannot make a copy of a unique_ptr, but you can move it using the new move semantics. Example:</description>
    </item>
  </channel>
</rss>
