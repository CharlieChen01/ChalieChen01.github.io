<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Cast on 👨‍🌾 Charlie Chen</title>
    <link>http://localhost:1313/tags/cast/</link>
    <description>Recent content in Cast on 👨‍🌾 Charlie Chen</description>
    <generator>Hugo -- 0.124.1</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 07 May 2024 10:37:11 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/cast/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Type Casts in C&#43;&#43;</title>
      <link>http://localhost:1313/posts/c&#43;&#43;/type-casts-in-c&#43;&#43;/</link>
      <pubDate>Tue, 07 May 2024 10:37:11 +0800</pubDate>
      <guid>http://localhost:1313/posts/c&#43;&#43;/type-casts-in-c&#43;&#43;/</guid>
      <description>在 C++ 中，类型转换是一个重要的概念，尤其是在处理不同类型的对象和指针时。以下是四种 C++ 类型转换运算符的适用场景：
static_cast: 用于基本数据类型之间的转换，如将 int 转换为 float。 用于类层次结构中向上转型（从派生类指针转换为基类指针）。 可以调用类型的显式转换构造函数或转换运算符。 示例： int i = 42; float f = static_cast&amp;lt;float&amp;gt;(i); // 将 int 转换为 float reinterpret_cast: 用于指针类型之间的转换，但不改变指针指向的内存内容。 可以将指针转换为足够大的整数类型，反之亦然。 通常用于底层操作，如操作硬件或进行与平台相关的调用。 示例： int* p = new int(42); void* v = reinterpret_cast&amp;lt;void*&amp;gt;(p); // 将 int* 转换为 void* const_cast: 用于添加或移除对象的 const 属性。 只能用于相同类型之间的转换，不能改变类型本身。 通常用于调用那些参数为非 const 的函数，而你有一个 const 对象。 示例： const int* cp = &amp;amp;i; int* p = const_cast&amp;lt;int*&amp;gt;(cp); // 移除 const 属性 dynamic_cast: 主要用于类层次结构中的安全向下转型（从基类指针转换为派生类指针）。 在转换无效时会返回 nullptr，因此比 static_cast 更安全。 需要运行时类型信息（RTTI）支持。 示例： Base* b = new Derived(); Derived* d = dynamic_cast&amp;lt;Derived*&amp;gt;(b); // 安全向下转型 在选择使用哪种类型转换时，应考虑转换的安全性和目的。static_cast 是最常用的转换类型，适用于大多数非多态类型转换。reinterpret_cast 是最不安全的，应谨慎使用。const_cast 通常用于移除 const 属性以便于特定函数的调用。dynamic_cast 在多态类型转换中提供了类型安全检查，但性能开销较大 12345。</description>
    </item>
  </channel>
</rss>
